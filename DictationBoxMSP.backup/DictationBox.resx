<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        USO2iAAAAABJRU5ErkJggg==
</value>
  </data>
</root>